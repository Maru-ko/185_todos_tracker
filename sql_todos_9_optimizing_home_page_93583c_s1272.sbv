0:00:04.640,0:00:07.680
so to get started let's take a look at

0:00:06.080,0:00:08.720
the template that we're using to render

0:00:07.680,0:00:10.400
that home page

0:00:08.720,0:00:12.320
and we can see exactly what data we

0:00:10.400,0:00:14.160
actually need to display there

0:00:12.320,0:00:15.599
and then when we modify this query we'll

0:00:14.160,0:00:16.640
make sure that we're only pulling back

0:00:15.599,0:00:20.640
that data

0:00:16.640,0:00:20.640
for the list and for its to-do's

0:00:24.160,0:00:28.080
okay and this is the template that we're

0:00:25.439,0:00:30.400
using to display that page

0:00:28.080,0:00:31.679
and we can see here that we're accessing

0:00:30.400,0:00:35.040
the id for the list

0:00:31.679,0:00:37.280
and its name and we're also passing the

0:00:35.040,0:00:39.280
list to this list class method

0:00:37.280,0:00:40.480
and we're passing the list also to these

0:00:39.280,0:00:43.680
other two methods here

0:00:40.480,0:00:44.960
to do's remaining count and to use count

0:00:43.680,0:00:46.399
so let's go see what those methods are

0:00:44.960,0:00:47.840
doing so let's take a look at the

0:00:46.399,0:00:51.440
implementation of those methods

0:00:47.840,0:00:51.440
and we can decide where to go from there

0:00:52.480,0:00:55.680
and here inside today.rb inside the

0:00:54.399,0:00:57.520
helpers block

0:00:55.680,0:00:58.960
we can find the definition of these

0:00:57.520,0:01:00.320
methods

0:00:58.960,0:01:02.640
so to use count is actually just

0:01:00.320,0:01:03.680
checking the size of the to-do's array

0:01:02.640,0:01:06.000
that is

0:01:03.680,0:01:08.240
inside the list and today's remaining

0:01:06.000,0:01:10.640
count is just counting how many of those

0:01:08.240,0:01:12.159
elements inside the titus array have a

0:01:10.640,0:01:15.200
value of completed

0:01:12.159,0:01:16.479
that is false now it's also worth

0:01:15.200,0:01:17.119
knowing that this to-do's remaining

0:01:16.479,0:01:19.680
account

0:01:17.119,0:01:20.799
method is actually used up here inside

0:01:19.680,0:01:23.920
list complete

0:01:20.799,0:01:25.360
and so is to-do's count itself

0:01:23.920,0:01:27.360
and then of course the question is where

0:01:25.360,0:01:29.119
is list complete used

0:01:27.360,0:01:30.240
now depending on what ide you use you

0:01:29.119,0:01:31.280
may have some nice searching

0:01:30.240,0:01:32.640
functionality

0:01:31.280,0:01:34.320
a lot of the time for this i will just

0:01:32.640,0:01:36.320
go to the console where i'm working on

0:01:34.320,0:01:38.000
the project and just use gitgrep

0:01:36.320,0:01:39.680
and then type in the code that i'm

0:01:38.000,0:01:41.360
looking for in the project

0:01:39.680,0:01:43.759
so in this case i want to see where to

0:01:41.360,0:01:45.920
do's count is used

0:01:43.759,0:01:47.040
if i have the dash n here to get correct

0:01:45.920,0:01:49.119
it's going to show me

0:01:47.040,0:01:50.960
the line number that's pretty useful so

0:01:49.119,0:01:51.759
okay so for to do that rb we're looking

0:01:50.960,0:01:55.520
at line 20

0:01:51.759,0:01:55.920
and 27. and so yeah that's this line

0:01:55.520,0:01:58.960
here

0:01:55.920,0:02:00.479
and then down here okay so that's good

0:01:58.960,0:02:01.759
so today's count is only used in those

0:02:00.479,0:02:08.000
two places

0:02:01.759,0:02:09.360
let's check out to do's remaining count

0:02:08.000,0:02:12.560
and it looks like it's about the same

0:02:09.360,0:02:15.040
situation so that method is used in 2.rb

0:02:12.560,0:02:17.360
in one place inside list complete and

0:02:15.040,0:02:18.239
then just inside the lists.erb view

0:02:17.360,0:02:19.599
template

0:02:18.239,0:02:21.520
and while we're checking let's find out

0:02:19.599,0:02:23.840
where exactly list complete is being

0:02:21.520,0:02:23.840
used

0:02:29.040,0:02:32.480
and that's showing up in two other

0:02:30.640,0:02:36.319
places inside to do.rb

0:02:32.480,0:02:38.000
on line 24 and on line 36.

0:02:36.319,0:02:40.480
so here's the first in this case we're

0:02:38.000,0:02:42.800
adding the class complete

0:02:40.480,0:02:43.920
and this is being used on the page where

0:02:42.800,0:02:45.680
we show the list

0:02:43.920,0:02:47.519
and it's to-do's and in that case if the

0:02:45.680,0:02:51.840
list is complete we cross a few things

0:02:47.519,0:02:51.840
out and there's some stylistic changes

0:02:52.239,0:02:58.160
it's also being used down here where

0:02:54.239,0:02:58.160
we're sorting the lists on the main page

0:02:58.319,0:03:02.840
and this is so that lists that are not

0:02:59.840,0:03:05.840
yet complete show up above those that

0:03:02.840,0:03:05.840
are

0:03:06.080,0:03:08.879
so there are a good number of things

0:03:07.840,0:03:10.000
that are going to have to change about

0:03:08.879,0:03:12.400
the application

0:03:10.000,0:03:13.760
if we change the way that the to-do

0:03:12.400,0:03:15.840
information is being retrieved from the

0:03:13.760,0:03:17.599
database

0:03:15.840,0:03:19.280
so let's focus on the main lists page

0:03:17.599,0:03:20.480
first get that to work

0:03:19.280,0:03:22.159
and then we'll have to come through and

0:03:20.480,0:03:23.280
figure out what to do about these other

0:03:22.159,0:03:26.640
pieces of the code

0:03:23.280,0:03:26.640
that are going to be affected

0:03:28.480,0:03:35.760
so if we go back to database persistence

0:03:31.519,0:03:35.760
let me go down to the all lists method

0:03:38.080,0:03:41.280
here is the query that we're going to

0:03:39.280,0:03:44.720
need to change in order to fetch all the

0:03:41.280,0:03:44.720
data for this front page

0:03:45.200,0:03:48.720
so let's go to the database and use the

0:03:47.040,0:03:49.920
postgres console to figure out what

0:03:48.720,0:03:51.200
select statement to use

0:03:49.920,0:03:52.560
and then we can come back and replace

0:03:51.200,0:03:53.280
the query that we're currently using in

0:03:52.560,0:03:56.799
that file

0:03:53.280,0:03:56.799
with the new one that we've identified

0:03:58.319,0:04:01.599
okay so here we are in the postgres

0:03:59.920,0:04:04.799
console let's take a look at all the

0:04:01.599,0:04:04.799
values in the lists table

0:04:06.959,0:04:11.760
okay there they are and then we'll do

0:04:08.480,0:04:11.760
the same thing for to do's

0:04:12.319,0:04:15.920
okay great so that's the data we're

0:04:13.599,0:04:17.919
working with now this is actually the

0:04:15.920,0:04:19.359
query that the code is currently using

0:04:17.919,0:04:21.359
in that first select statement where

0:04:19.359,0:04:22.960
we're just getting all of the lists

0:04:21.359,0:04:24.639
so we're going to need to extend this to

0:04:22.960,0:04:26.400
also pull in some information about the

0:04:24.639,0:04:27.840
to-do's

0:04:26.400,0:04:31.280
now if we think about what data we need

0:04:27.840,0:04:32.880
about the to use for that page

0:04:31.280,0:04:34.880
we actually don't need anything except

0:04:32.880,0:04:36.479
the count of how many there are

0:04:34.880,0:04:38.560
we just need to render these two numbers

0:04:36.479,0:04:39.520
right here and to me that sounds like a

0:04:38.560,0:04:41.360
good match for

0:04:39.520,0:04:43.759
joining the list table to the to-do's

0:04:41.360,0:04:45.199
table grouping by the list id

0:04:43.759,0:04:46.880
and then we can use a few count

0:04:45.199,0:04:47.840
expressions to create these two values

0:04:46.880,0:04:49.440
that we need

0:04:47.840,0:04:51.919
for the numbers of different kinds of

0:04:49.440,0:04:51.919
to-do's

0:04:52.160,0:04:55.600
so we'll start with the same query that

0:04:53.759,0:04:56.880
we're currently using so let's start

0:04:55.600,0:04:59.600
from lists

0:04:56.880,0:05:00.080
and we'll add this to join clause so

0:04:59.600,0:05:03.360
we'll say

0:05:00.080,0:05:06.560
join to do's

0:05:03.360,0:05:11.840
on to do's dot list

0:05:06.560,0:05:11.840
id equals lists dot id

0:05:12.560,0:05:17.280
okay and so we can see the progress that

0:05:14.479,0:05:17.280
we're making here

0:05:17.600,0:05:21.680
now what we need to do first of all is

0:05:20.160,0:05:22.400
we need to control which columns are

0:05:21.680,0:05:24.479
getting back

0:05:22.400,0:05:26.880
now in this case we're pulling back all

0:05:24.479,0:05:28.560
of the columns both for the lists and

0:05:26.880,0:05:31.840
the to-do's table

0:05:28.560,0:05:31.840
and we don't really want that

0:05:32.080,0:05:36.320
so we'll go back to the beginning of the

0:05:33.280,0:05:37.840
query here let's say list stat

0:05:36.320,0:05:39.440
asterisk so that'll give us just the

0:05:37.840,0:05:41.199
columns for the list table

0:05:39.440,0:05:42.800
and then here's where we can add our

0:05:41.199,0:05:44.479
accounts so that we can count the number

0:05:42.800,0:05:49.120
of to-do so for example we could say

0:05:44.479,0:05:49.120
count to do's that id

0:05:49.360,0:05:52.880
okay and then this error of course is

0:05:51.039,0:05:55.120
because i forgot to add the group

0:05:52.880,0:05:56.720
clause to this sql query and it's saying

0:05:55.120,0:05:58.800
that you basically can't use

0:05:56.720,0:06:00.080
a count expression in the select list

0:05:58.800,0:06:03.120
unless you also

0:06:00.080,0:06:07.360
have a group being used

0:06:03.120,0:06:10.639
so we'll add that here group by

0:06:07.360,0:06:12.479
list set id okay

0:06:10.639,0:06:14.000
and there's the results so we have now

0:06:12.479,0:06:16.479
just the data for the list

0:06:14.000,0:06:19.360
and we have the count for how many total

0:06:16.479,0:06:20.880
to-do's there are on that list

0:06:19.360,0:06:23.440
now it's becoming difficult to edit this

0:06:20.880,0:06:24.960
query in the command line

0:06:23.440,0:06:26.720
and so here i'll show you a trick that

0:06:24.960,0:06:30.479
you can use there's a command called

0:06:26.720,0:06:32.479
slash e in the postgresql console

0:06:30.479,0:06:33.759
what that's going to do is open up your

0:06:32.479,0:06:36.479
default editor

0:06:33.759,0:06:37.840
and paste into that editor the last

0:06:36.479,0:06:39.919
command that you had put into the

0:06:37.840,0:06:40.639
console so for example if i say slash e

0:06:39.919,0:06:42.400
here

0:06:40.639,0:06:44.000
now my default editor is vim so it's

0:06:42.400,0:06:45.600
going to open up vim

0:06:44.000,0:06:47.120
and from here i can edit that last query

0:06:45.600,0:06:48.960
that i entered into the console

0:06:47.120,0:06:50.880
but i can use all the common features of

0:06:48.960,0:06:52.319
my editor that i'm familiar with

0:06:50.880,0:06:53.840
and this is nice if you're working on

0:06:52.319,0:06:54.880
complicated queries or queries with a

0:06:53.840,0:06:56.720
lot of parts

0:06:54.880,0:06:58.880
because since sql is not white space

0:06:56.720,0:07:00.639
sensitive you can break the query up

0:06:58.880,0:07:02.080
into multiple lines you can do whatever

0:07:00.639,0:07:04.800
you need to so you can actually

0:07:02.080,0:07:06.240
see it and edit it more easily and then

0:07:04.800,0:07:06.800
what the way this works is you just need

0:07:06.240,0:07:08.560
to

0:07:06.800,0:07:09.840
save the changes to this file which is

0:07:08.560,0:07:10.960
just a temporary file that's been

0:07:09.840,0:07:12.720
created for you

0:07:10.960,0:07:14.080
and quit the editor and then the

0:07:12.720,0:07:15.520
postgres console will take

0:07:14.080,0:07:17.360
the value that you've saved to that file

0:07:15.520,0:07:18.080
and execute it as if you had typed it at

0:07:17.360,0:07:21.440
the prompt

0:07:18.080,0:07:23.199
so for instance here i'm going to

0:07:21.440,0:07:26.400
do a little bit of editing just to make

0:07:23.199,0:07:26.400
this easier to deal with

0:07:27.520,0:07:30.560
let's make sure to use a left join so we

0:07:30.240,0:07:34.080
get

0:07:30.560,0:07:36.720
all of the lists even if they don't have

0:07:34.080,0:07:40.000
any to-do's and i'll show you here just

0:07:36.720,0:07:42.400
by writing this out and quitting

0:07:40.000,0:07:46.240
the console then executes that same

0:07:42.400,0:07:46.240
query as if i just typed it directly in

0:07:50.400,0:07:54.080
so here's where we are right now we're

0:07:52.319,0:07:55.759
selecting the values for the list

0:07:54.080,0:07:57.360
we're counting the number of to-do's it

0:07:55.759,0:07:58.000
would probably be nice to change the

0:07:57.360,0:08:00.080
name of this

0:07:58.000,0:08:01.120
column count isn't very specific so

0:08:00.080,0:08:13.759
let's call this

0:08:01.120,0:08:15.360
to do's count

0:08:13.759,0:08:17.360
okay so that's to use count now the

0:08:15.360,0:08:19.840
other value that we need

0:08:17.360,0:08:21.039
is this first number so we have the

0:08:19.840,0:08:21.919
second one which is the total number of

0:08:21.039,0:08:23.280
threes

0:08:21.919,0:08:27.840
we need this which is the number of

0:08:23.280,0:08:27.840
to-do's that have not yet been completed

0:08:28.000,0:08:30.879
so let's take a look again at the

0:08:29.120,0:08:33.120
valleys in that table and see how we

0:08:30.879,0:08:33.120
might

0:08:35.519,0:08:41.039
how we might count the number of to do's

0:08:37.200,0:08:44.000
that are not yet completed

0:08:41.039,0:08:44.800
now the count function in sql returns a

0:08:44.000,0:08:46.800
number

0:08:44.800,0:08:47.839
that is the total count of how many

0:08:46.800,0:08:50.080
values

0:08:47.839,0:08:50.880
that are in that column that are not

0:08:50.080,0:08:52.720
null

0:08:50.880,0:08:54.560
so any other value other than null so

0:08:52.720,0:08:56.800
both true and false

0:08:54.560,0:08:58.480
are going to be counted and so the

0:08:56.800,0:09:00.080
simplest thing that i can think of here

0:08:58.480,0:09:05.279
is not going to work so i could say

0:09:00.080,0:09:05.279
select count to do's dot completed

0:09:06.880,0:09:10.480
and see the count there is going to be

0:09:08.240,0:09:10.480
10

0:09:10.560,0:09:13.600
and there are 10 to-do's in the to-do's

0:09:13.040,0:09:15.040
table

0:09:13.600,0:09:17.120
so that's not going to work we need a

0:09:15.040,0:09:17.760
count that's going to only return the

0:09:17.120,0:09:21.200
count

0:09:17.760,0:09:22.480
of how many are not completed

0:09:21.200,0:09:24.000
and this is a case where all the

0:09:22.480,0:09:26.160
different functions that are provided by

0:09:24.000,0:09:27.360
postgres and the sql standard can really

0:09:26.160,0:09:28.720
come in handy

0:09:27.360,0:09:31.040
so we really need to do if we're going

0:09:28.720,0:09:33.120
to continue to use count is figure out a

0:09:31.040,0:09:35.440
way to turn some of the values in this

0:09:33.120,0:09:36.880
completed column into nulls

0:09:35.440,0:09:38.240
and basically what we want since we want

0:09:36.880,0:09:39.279
to count the twos that are not yet

0:09:38.240,0:09:41.120
completed

0:09:39.279,0:09:44.000
we want to turn any value here that's

0:09:41.120,0:09:46.480
true into a null

0:09:44.000,0:09:47.680
now fortunately there is just such a

0:09:46.480,0:09:51.680
function in sql

0:09:47.680,0:09:53.920
and it's called null if

0:09:51.680,0:09:54.720
and so what i can do is instead of just

0:09:53.920,0:09:56.959
counting

0:09:54.720,0:09:58.240
the values of to use that completed i

0:09:56.959,0:10:01.040
can say count and then

0:09:58.240,0:10:01.040
null if

0:10:02.880,0:10:07.519
so just completed is true

0:10:08.480,0:10:12.000
so what that will do is null if is going

0:10:10.959,0:10:15.600
to return

0:10:12.000,0:10:16.959
null if the value in that column is true

0:10:15.600,0:10:19.120
otherwise it's just going to return

0:10:16.959,0:10:20.399
whatever the actual value is

0:10:19.120,0:10:22.079
so that means that the values in the

0:10:20.399,0:10:22.959
completed column instead of being true

0:10:22.079,0:10:25.360
and false

0:10:22.959,0:10:27.680
are going to get null and false and then

0:10:25.360,0:10:29.120
because we're passing those into account

0:10:27.680,0:10:31.120
count's going to count all the columns

0:10:29.120,0:10:31.760
that are not null so it's going to just

0:10:31.120,0:10:34.560
ignore

0:10:31.760,0:10:36.480
anything that was originally true and in

0:10:34.560,0:10:36.880
this way we can count and find that we

0:10:36.480,0:10:40.160
have

0:10:36.880,0:10:42.399
eight to-do's that need to be completed

0:10:40.160,0:10:43.920
so if we take this idea back into our

0:10:42.399,0:10:46.720
other sql query

0:10:43.920,0:10:47.920
here what we'll do is we'll take this

0:10:46.720,0:10:50.480
expression

0:10:47.920,0:10:51.760
and we'll add it to the select list here

0:10:50.480,0:10:52.720
and then that should provide us with

0:10:51.760,0:10:54.959
another column

0:10:52.720,0:10:56.160
that will contain the number of to do's

0:10:54.959,0:11:01.839
that need to be completed

0:10:56.160,0:11:01.839
for each of the lists

0:11:03.600,0:11:09.519
and we'll call this column to do's

0:11:06.959,0:11:09.519
remaining

0:11:11.839,0:11:16.240
okay and so let's take a look at this

0:11:14.720,0:11:18.640
data and let's hop back over to the

0:11:16.240,0:11:21.600
browser and see if it looks right

0:11:18.640,0:11:23.360
so for example aaron's is going to have

0:11:21.600,0:11:25.760
four total to do's and three are

0:11:23.360,0:11:28.560
remaining

0:11:25.760,0:11:29.600
errands has four to do's and three

0:11:28.560,0:11:31.760
remaining

0:11:29.600,0:11:33.519
groceries has two remaining of three

0:11:31.760,0:11:36.560
total

0:11:33.519,0:11:37.360
here we've got groceries three total and

0:11:36.560,0:11:40.560
two remaining

0:11:37.360,0:11:42.079
so this looks right so then

0:11:40.560,0:11:43.920
this is the query that we need to take

0:11:42.079,0:11:47.040
back and add to

0:11:43.920,0:11:47.040
our ruby application

0:11:49.440,0:11:54.839
and so we need to delete that and then

0:11:52.639,0:11:57.839
we need to replace it with the new

0:11:54.839,0:11:57.839
query

0:12:11.360,0:12:14.959
now here i'm using the here doc syntax

0:12:13.120,0:12:16.560
because this is a multiple line

0:12:14.959,0:12:18.720
string in ruby and that's a pretty nice

0:12:16.560,0:12:20.320
way to do it

0:12:18.720,0:12:21.440
so once we execute this statement we

0:12:20.320,0:12:21.839
should have all the data that we

0:12:21.440,0:12:24.800
actually

0:12:21.839,0:12:26.800
need to render that home page the

0:12:24.800,0:12:27.760
problem is that we still have this map

0:12:26.800,0:12:28.959
loop here

0:12:27.760,0:12:31.360
where we're performing additional

0:12:28.959,0:12:32.720
queries and we no longer need to fetch

0:12:31.360,0:12:34.880
all the to do's

0:12:32.720,0:12:36.880
so we'll remove that line we need the id

0:12:34.880,0:12:39.279
and the name so we'll leave that alone

0:12:36.880,0:12:39.920
and now here let's just change these

0:12:39.279,0:12:42.079
values

0:12:39.920,0:12:44.959
so instead of to do's we're going to

0:12:42.079,0:12:48.240
have to use count

0:12:44.959,0:12:50.800
that'll be equal to tuple to do's

0:12:48.240,0:12:52.560
count and now remember that's going to

0:12:50.800,0:12:55.120
come back to us as a string

0:12:52.560,0:12:56.079
so let's just call 2i on that value so

0:12:55.120,0:12:58.639
we convert it into

0:12:56.079,0:13:00.320
a fixednum object now we're running out

0:12:58.639,0:13:07.839
of room here so i might change the way

0:13:00.320,0:13:07.839
that this is formatted

0:13:09.200,0:13:12.800
and i might actually consolidate this

0:13:10.959,0:13:14.639
into this expression

0:13:12.800,0:13:21.839
since we're no longer using that list id

0:13:14.639,0:13:21.839
value anywhere else

0:13:22.800,0:13:28.320
and then we need another value here

0:13:24.320,0:13:28.320
let's just say to do's remaining

0:13:29.760,0:13:35.839
and we'll do the same thing here

0:13:42.240,0:13:46.160
and so now let's come back to the page

0:13:44.480,0:13:47.600
where we're rendering this data

0:13:46.160,0:13:49.199
and we'll need to update the places to

0:13:47.600,0:13:49.920
use this to use count and to use

0:13:49.199,0:13:51.279
remaining

0:13:49.920,0:13:54.000
instead of those helper methods that we

0:13:51.279,0:13:54.000
looked at earlier

0:13:56.720,0:14:00.240
so this is the line in question and

0:13:58.959,0:14:01.519
right now we're printing out to use

0:14:00.240,0:14:04.079
remaining count for list

0:14:01.519,0:14:05.680
and then to use count so instead we'll

0:14:04.079,0:14:10.160
change this to be

0:14:05.680,0:14:13.440
list to do's

0:14:10.160,0:14:15.279
remaining and actually we can go back

0:14:13.440,0:14:17.279
and change all that to say

0:14:15.279,0:14:18.959
to be remaining count everywhere just so

0:14:17.279,0:14:20.480
that it's a little more consistent

0:14:18.959,0:14:22.240
and then likewise here we'll change this

0:14:20.480,0:14:25.600
to be a list

0:14:22.240,0:14:25.600
to do's count

0:14:26.560,0:14:31.839
save that let's go back to that other

0:14:29.199,0:14:31.839
file real quick

0:14:32.000,0:14:36.000
i like the consistency of adding count

0:14:34.399,0:14:36.320
to the end of these values because they

0:14:36.000,0:14:38.720
are

0:14:36.320,0:14:38.720
counts

0:14:41.920,0:14:46.079
and that way there's some parity between

0:14:43.839,0:14:47.199
these two values both in the hash and

0:14:46.079,0:14:49.519
in the data that we're pulling out of

0:14:47.199,0:14:51.040
the query now don't forget if you change

0:14:49.519,0:14:53.199
the value here that you're referencing

0:14:51.040,0:14:54.959
from one of these tuples that's returned

0:14:53.199,0:14:56.480
we'll need to also rename it up here in

0:14:54.959,0:14:59.839
the query where we're actually

0:14:56.480,0:15:00.639
creating that value so i'll add count to

0:14:59.839,0:15:03.839
the end of that

0:15:00.639,0:15:06.720
alias there okay now if i hop back over

0:15:03.839,0:15:06.720
here to the browser

0:15:06.800,0:15:13.040
i need to of course make sure that the

0:15:08.800,0:15:14.560
application is running

0:15:13.040,0:15:16.320
and so we have an error so let's figure

0:15:14.560,0:15:18.320
out where this is happening

0:15:16.320,0:15:19.680
and it looks like the errors in to do's

0:15:18.320,0:15:23.279
count

0:15:19.680,0:15:23.279
let's figure out where that is actually

0:15:24.839,0:15:27.199
occurring

0:15:26.000,0:15:30.240
it looks like it's probably going to be

0:15:27.199,0:15:33.440
in list class

0:15:30.240,0:15:33.440
let's go to to-do.rb

0:15:35.440,0:15:39.519
and find the list class and here we're

0:15:37.600,0:15:42.639
saying complete if list complete

0:15:39.519,0:15:44.000
list and of course now this list

0:15:42.639,0:15:44.560
complete method is the one that we saw

0:15:44.000,0:15:45.759
earlier

0:15:44.560,0:15:47.040
and it's calling into those other two

0:15:45.759,0:15:48.720
methods and those are expecting the

0:15:47.040,0:15:50.480
to-do's array to be there

0:15:48.720,0:15:52.320
all the time so let's change the

0:15:50.480,0:15:54.240
implementation of this method

0:15:52.320,0:15:56.000
now i'm going to copy it and comment out

0:15:54.240,0:15:57.040
the original just so we have it as a

0:15:56.000,0:15:59.040
reference

0:15:57.040,0:16:00.160
now here we're saying to use count list

0:15:59.040,0:16:01.680
is greater than zero

0:16:00.160,0:16:04.079
so we can actually just rewrite this

0:16:01.680,0:16:04.480
using our new values that we're pulling

0:16:04.079,0:16:08.240
out

0:16:04.480,0:16:09.920
for that list so to use count

0:16:08.240,0:16:13.360
and to do's remaining count this is the

0:16:09.920,0:16:13.360
same thing so we can say list

0:16:16.480,0:16:20.959
okay so now we're using the new values

0:16:18.560,0:16:22.560
that we're returning from the list

0:16:20.959,0:16:25.600
from our new query instead of using

0:16:22.560,0:16:25.600
these other helper methods

0:16:30.480,0:16:34.079
and it looks like we're correctly

0:16:32.000,0:16:34.880
displaying all the data for all of these

0:16:34.079,0:16:36.320
lists

0:16:34.880,0:16:38.399
now something you might have noticed is

0:16:36.320,0:16:40.160
that the order of the lists

0:16:38.399,0:16:41.519
on this page has changed even though the

0:16:40.160,0:16:42.320
values that we're displaying for each

0:16:41.519,0:16:45.279
one

0:16:42.320,0:16:46.240
have remained consistent the real cause

0:16:45.279,0:16:48.000
for this is that

0:16:46.240,0:16:50.079
when we're executing that query to pull

0:16:48.000,0:16:51.360
back this data we aren't specifying an

0:16:50.079,0:16:53.519
order clause

0:16:51.360,0:16:55.120
and so it's easy to forget to do that

0:16:53.519,0:16:56.880
because a lot of the time

0:16:55.120,0:16:58.639
databases are going to return rows to

0:16:56.880,0:16:59.600
you basically in the order that they

0:16:58.639,0:17:01.199
were created

0:16:59.600,0:17:02.639
just because of how they are implemented

0:17:01.199,0:17:04.880
internally

0:17:02.639,0:17:05.839
but it's best to never depend upon that

0:17:04.880,0:17:07.839
behavior because

0:17:05.839,0:17:09.360
just as we've seen here as soon as you

0:17:07.839,0:17:10.880
change the query a little bit

0:17:09.360,0:17:13.039
the results may come back to you in a

0:17:10.880,0:17:14.319
different order and so the lesson to

0:17:13.039,0:17:16.559
take away from this

0:17:14.319,0:17:18.640
is that if you need data to be displayed

0:17:16.559,0:17:20.240
in a certain order on your page

0:17:18.640,0:17:22.880
make sure that you're using an order

0:17:20.240,0:17:24.799
clause to make that order explicit

0:17:22.880,0:17:27.919
even if the query is simple and it seems

0:17:24.799,0:17:27.919
like it's unnecessary

0:17:29.120,0:17:33.840
so we can change that pretty easily here

0:17:34.240,0:17:40.720
let's add an order by

0:17:37.360,0:17:40.720
and let's order by

0:17:40.960,0:17:44.640
let's just order by the list name for

0:17:44.840,0:17:47.840
now

0:17:50.000,0:17:52.640
now it's possible that maybe in your

0:17:51.360,0:17:54.000
application you would actually want to

0:17:52.640,0:17:55.679
order them based on

0:17:54.000,0:17:57.360
how many total to-do's there are or how

0:17:55.679,0:17:58.640
many are remaining but the most

0:17:57.360,0:18:00.080
important thing for us is that now the

0:17:58.640,0:18:03.360
order is consistent

0:18:00.080,0:18:03.360
and something that you can expect

0:18:03.919,0:18:07.600
so just as a review for what we've done

0:18:05.760,0:18:09.440
here

0:18:07.600,0:18:11.120
we've replaced a relatively simple query

0:18:09.440,0:18:12.320
with a much more uncomplicated one that

0:18:11.120,0:18:14.240
uses a join

0:18:12.320,0:18:16.080
and uses a few counts to get all the

0:18:14.240,0:18:17.520
data that we need to display a page in a

0:18:16.080,0:18:20.480
single query

0:18:17.520,0:18:22.640
now if we hop over to the console here

0:18:20.480,0:18:25.919
i'll reload this page

0:18:22.640,0:18:27.280
the difference is pretty obvious before

0:18:25.919,0:18:29.360
we made this change

0:18:27.280,0:18:32.000
we were executing many queries on the

0:18:29.360,0:18:33.760
database just to display a single page

0:18:32.000,0:18:36.160
we had one for lists and then for each

0:18:33.760,0:18:38.640
list we were executing an extra query

0:18:36.160,0:18:40.640
to get all the to-do's and you can

0:18:38.640,0:18:42.080
imagine in a bigger application

0:18:40.640,0:18:43.520
maybe we need some information for this

0:18:42.080,0:18:45.440
to do and so we'd have to do another

0:18:43.520,0:18:47.039
query on top of that for each to do

0:18:45.440,0:18:48.880
and you can see how those n plus one

0:18:47.039,0:18:50.400
problems can really explode

0:18:48.880,0:18:53.200
as the data model that's used by our

0:18:50.400,0:18:54.720
application increases in complexity

0:18:53.200,0:18:56.720
now what we were able to do in this case

0:18:54.720,0:18:58.000
is replace those multiple queries with a

0:18:56.720,0:19:00.320
single query

0:18:58.000,0:19:01.520
and while it's more complicated this is

0:19:00.320,0:19:03.360
going to be a lot more efficient

0:19:01.520,0:19:06.799
especially as the size of data

0:19:03.360,0:19:08.640
that's managed by the application grows

0:19:06.799,0:19:10.240
the other thing to notice about this is

0:19:08.640,0:19:13.200
that we're not pulling back

0:19:10.240,0:19:14.960
all the data for all the to do's before

0:19:13.200,0:19:16.559
because we were saying select asterisk

0:19:14.960,0:19:17.120
from to do's we were pulling back their

0:19:16.559,0:19:18.640
name

0:19:17.120,0:19:20.799
whether they were completed in addition

0:19:18.640,0:19:22.320
to their id and the list id

0:19:20.799,0:19:23.840
even though we didn't really need that

0:19:22.320,0:19:25.039
because we already knew what list we

0:19:23.840,0:19:27.280
were getting the to-dos from

0:19:25.039,0:19:28.559
based on the query so in this case we're

0:19:27.280,0:19:30.559
actually only pulling back

0:19:28.559,0:19:31.760
counts of the to-do's and none of the

0:19:30.559,0:19:33.280
data for

0:19:31.760,0:19:36.640
any of the additional to-do's since we

0:19:33.280,0:19:36.640
aren't displaying it on the screen

0:19:37.440,0:19:41.200
so this is going to be more efficient

0:19:38.880,0:19:42.640
for two reasons one is that there's less

0:19:41.200,0:19:43.600
data that has to be sent over the

0:19:42.640,0:19:45.919
network from

0:19:43.600,0:19:48.240
the database to the application now for

0:19:45.919,0:19:49.520
a small query like this on this data set

0:19:48.240,0:19:52.400
we aren't going to notice any kind of

0:19:49.520,0:19:54.799
difference but for a large data set

0:19:52.400,0:19:56.240
or a table that has a lot of columns

0:19:54.799,0:19:58.640
something like that can actually make a

0:19:56.240,0:19:58.640
difference

0:19:58.880,0:20:03.039
the second thing is that all that data

0:20:00.960,0:20:04.480
is coming back into our ruby process

0:20:03.039,0:20:07.360
and then it has to be managed and

0:20:04.480,0:20:08.799
converted into ruby objects so

0:20:07.360,0:20:10.320
we're preventing a lot of other work

0:20:08.799,0:20:13.039
from happening behind the scenes for

0:20:10.320,0:20:14.400
data that we're never going to use

0:20:13.039,0:20:16.559
now one thing i want to stress about

0:20:14.400,0:20:18.080
this is that this is the kind of

0:20:16.559,0:20:19.120
optimization that you should only do

0:20:18.080,0:20:20.159
when you've determined that it's

0:20:19.120,0:20:22.320
necessary

0:20:20.159,0:20:24.000
it's best to write an application with

0:20:22.320,0:20:26.159
more general purpose queries

0:20:24.000,0:20:27.919
that are going to be less specific and

0:20:26.159,0:20:30.400
maybe are not quite as

0:20:27.919,0:20:31.039
efficient as they could possibly be but

0:20:30.400,0:20:33.120
because they're

0:20:31.039,0:20:36.960
more generalized that makes developing

0:20:33.120,0:20:36.960
the application further much simpler

0:20:37.520,0:20:40.799
however in the future as the application

0:20:39.440,0:20:43.039
has continued to develop

0:20:40.799,0:20:45.120
you may be able to find places where the

0:20:43.039,0:20:47.679
performance of specific pages

0:20:45.120,0:20:49.360
seems like it's not quite good enough or

0:20:47.679,0:20:50.320
in a case like this you find an n plus

0:20:49.360,0:20:51.520
one query

0:20:50.320,0:20:53.360
and you have a pretty good idea that

0:20:51.520,0:20:54.400
that's eventually going to be a problem

0:20:53.360,0:20:56.400
and so those are the times where it

0:20:54.400,0:20:57.440
makes sense to go through and change the

0:20:56.400,0:21:00.000
code to handle

0:20:57.440,0:21:01.679
special case queries like this that are

0:21:00.000,0:21:02.240
extracting exactly the data that you

0:21:01.679,0:21:03.919
need

0:21:02.240,0:21:07.600
from the database in order to perform

0:21:03.919,0:21:07.600
the functionality required by the

0:21:11.480,0:21:14.480
application

